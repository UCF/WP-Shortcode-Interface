{"version":3,"sources":["wp-scif.ts"],"names":["WPSCIF","ShortcodeInterface","_this","this","$toggle","jQuery","$interface","$submitBtn","find","$select","selectedShortcode","$activeShortcodeEditor","$activeShortcodeDescription","$activeFields","click","e","resetForm","onSubmitBtnClick","change","onSelectChanged","prototype","editor","tinyMCE","activeEditor","val","trigger","prop","each","i","field","$field","validateForm","errors","name","data","addClass","removeClass","getFormValues","command","params","allowsContent","undefined","param","value","hasClass","String","insertShortcode","enclosingText","selection","getContent","text","key","send_to_editor","preventDefault","$activeShortcodeElems","filter","document","ready"],"mappings":"AAGA,GAAUA,SAAV,SAAUA,GACN,GAAAC,GAAA,WAWI,QAAAA,KAAA,GAAAC,GAAAC,IACIA,MAAKC,QAAUC,OAAO,kBACtBF,KAAKG,WAAaD,OAAO,uBACzBF,KAAKI,WAAaJ,KAAKG,WAAWE,KAAK,mBACvCL,KAAKM,QAAUN,KAAKG,WAAWE,KAAK,mBACpCL,KAAKO,kBAAoB,KACzBP,KAAKQ,uBAAyB,KAC9BR,KAAKS,4BAA8B,KACnCT,KAAKU,cAAgB,KAErBV,KAAKC,QAAQU,MAAO,SAACC,GAAQb,EAAKc,cAClCb,KAAKI,WAAWO,MAAO,SAACC,GAAQb,EAAKe,iBAAiBF,KACtDZ,KAAKM,QAAQS,OAAQ,SAACH,GAAQb,EAAKiB,gBAAgBJ,KAgJ3D,MA7IId,GAAAmB,UAAAJ,UAAA,WACIb,KAAKkB,OAASC,QAAQC,aAAeD,QAAQC,aAAe,KAC5DpB,KAAKM,QAAQe,IAAI,IAAIC,QAAQ,UACzBtB,KAAKU,gBACLV,KAAKU,cAAca,KAAK,WAAW,GACnCvB,KAAKU,cAAcc,KAAM,SAACC,EAAGC,GACzB,GAAIC,GAASzB,OAAOwB,EACS,cAAxBC,EAAOJ,KAAW,MACnBI,EAAON,IAAI,QAM3BvB,EAAAmB,UAAAW,aAAA,WACI,GAAIC,GAAS,CAoBb,OAlBI7B,MAAKU,cACLV,KAAKU,cAAcc,KAAM,SAACC,EAAGC,GACzB,GAAIC,GAASzB,OAAOwB,GAChBI,EAAOH,EAAOI,KAAK,aACRJ,GAAOI,KAAK,kBAES,KAAjBJ,EAAON,OACtBnB,OAAQ,IAAM4B,EAAO,UAAWE,SAAS,UACzCH,KAEA3B,OAAQ,IAAM4B,EAAO,UAAWG,YAAY,YAKpDJ,KAGCA,GAOT/B,EAAAmB,UAAAiB,cAAA,WACI,GAAIH,IACAI,QAASnC,KAAKO,kBACd6B,UACAC,kBAA2EC,KAA5DtC,KAAKQ,uBAAuBuB,KAAK,uBAGpD/B,MAAKU,cAAcc,KAAM,SAACC,EAAGC,GACzB,GAAIC,GAASzB,OAAOwB,GAChBa,EAASZ,EAAOI,KAAK,cACrBS,EAAS,EAEb,QAAQb,EAAOJ,KAAK,YAChB,IAAK,QACL,IAAK,WACL,IAAK,SACD,GAA4B,aAAxBI,EAAOJ,KAAK,QACZ,GAAKI,EAAOc,SAAU,sBAAyB,CAC3C,IAAKd,EAAOJ,KAAK,WAGb,KAFAiB,GAAQb,EAAON,UAKnBmB,GAAQE,OAAOf,EAAOJ,KAAK,gBAG/BiB,GAAQb,EAAON,KAEnB,MACJ,SACImB,EAAQb,EAAON,MAGnBmB,QACkC,KAAvBT,EAAKK,OAAOG,GACnBR,EAAKK,OAAOG,IAAU,IAAMC,EAE5BT,EAAKK,OAAOG,GAASC,KAKjCxC,KAAK2C,gBAAgBZ,IAGzBjC,EAAAmB,UAAA0B,gBAAA,SAAgBZ,GACZ,GAAIa,GAAgB,IAEf5C,MAAKkB,SACN0B,EAAgB5C,KAAKkB,OAAO2B,UAAUC,aAG1C,IAAIC,GAAO,IAAMhB,EAAKI,OAEtB,IAAIJ,EAAKK,OACL,IAAK,GAAIY,KAAOjB,GAAKK,OACjBW,GAAQ,IAAMC,EAAM,KAAOjB,EAAKK,OAAOY,GAAO,GAItDD,IAAQ,IAEHH,IACDG,GAAQH,GAEPb,EAAKM,gBACNU,GAAQ,KAAOhB,EAAKI,QAAU,KAGlCc,eAAgBF,IAGpBjD,EAAAmB,UAAAH,iBAAA,SAAiBF,GACbA,EAAEsC,iBAEGlD,KAAK4B,gBACN5B,KAAKkC,iBAIbpC,EAAAmB,UAAAD,gBAAA,SAAgBJ,GACZZ,KAAKO,kBAAoBP,KAAKM,QAAQe,MAElCrB,KAAKQ,wBACLR,KAAKQ,uBAAuByB,YAAY,UAExCjC,KAAKS,6BACLT,KAAKS,4BAA4BwB,YAAY,SAKjD,IAAIkB,GAAwBnD,KAAKG,WAAWE,KAAK,cAAgBL,KAAKO,mBAAmByB,SAAS,SAClGhC,MAAKQ,uBAAyB2C,EAAsBC,OAAO,qBAC3DpD,KAAKS,4BAA8B0C,EAAsBC,OAAO,mBAEhEpD,KAAKU,cAAgBV,KAAKQ,uBAAuBH,KAAK,mBAE9DP,IAvKaD,GAAAC,mBAAkBA,GADzBD,SAAAA,YA2Ka,mBAAXK,SACRA,OAAOmD,UAAUC,MAAO,WACpB,GAAIzD,QAAOC","file":"wp-scif.min.js","sourcesContent":["declare var tinyMCE: any;\ndeclare var send_to_editor: Function;\n\nnamespace WPSCIF {\n    export class ShortcodeInterface {\n        public $toggle: any;\n        public $interface: any;\n        public $submitBtn: any;\n        public $select: any;\n        public selectedShortcode: string;\n        public $activeShortcodeEditor: any;\n        public $activeShortcodeDescription: any;\n        public $activeFields: any;\n        public editor: any;\n\n        constructor() {\n            this.$toggle = jQuery('#add-shortcode');\n            this.$interface = jQuery('#wp-scif-form-inner');\n            this.$submitBtn = this.$interface.find('#wp-scif-submit');\n            this.$select = this.$interface.find('#wp-scif-select');\n            this.selectedShortcode = null;\n            this.$activeShortcodeEditor = null;\n            this.$activeShortcodeDescription = null;\n            this.$activeFields = null;\n\n            this.$toggle.click( (e) => { this.resetForm() } );\n            this.$submitBtn.click( (e) => { this.onSubmitBtnClick(e) });\n            this.$select.change( (e) => { this.onSelectChanged(e) });\n        }\n\n        resetForm() {\n            this.editor = tinyMCE.activeEditor ? tinyMCE.activeEditor : null;\n            this.$select.val('').trigger('change');\n            if (this.$activeFields) {\n                this.$activeFields.prop('checked', false);\n                this.$activeFields.each( (i, field) => {\n                    var $field = jQuery(field);\n                    if ( $field.prop['type'] !== 'checkbox' ) {\n                        $field.val('');\n                    }\n                });\n            }\n        }\n\n        validateForm() : boolean {\n            var errors = 0;\n\n            if (this.$activeFields) {\n                this.$activeFields.each( (i, field) => {\n                    var $field = jQuery(field),\n                        name = $field.data('scif-param'),\n                        required = $field.data('scif-required');\n\n                    if ( required && ( $field.val() === '' ) ) {\n                        jQuery( '.' + name + '-error' ).addClass('active');\n                        errors++;\n                    } else {\n                        jQuery( '.' + name + '-error' ).removeClass('active');\n                    }\n                } );\n            }\n            else {\n                errors++;\n            }\n\n            if ( errors ) {\n                return false;\n            }\n\n            return true;\n        }\n\n        getFormValues() {\n            var data = {\n                command: this.selectedShortcode,\n                params: {},\n                allowsContent: this.$activeShortcodeEditor.data('scif-allows-content') !== undefined\n            };\n\n            this.$activeFields.each( (i, field) => {\n                var $field = jQuery(field),\n                    param  = $field.data('scif-param'),\n                    value  = '';\n\n                switch( $field.prop('tagName') ) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                    case 'SELECT':\n                        if ($field.prop('type') === 'checkbox') {\n                            if ( $field.hasClass( 'checkbox-list-item' ) ) {\n                                if ( $field.prop('checked') ) {\n                                    value = $field.val();\n                                } else {\n                                    break;\n                                }\n                            } else {\n                                value = String($field.prop('checked'));\n                            }\n                        } else {\n                            value = $field.val();\n                        }\n                        break;\n                    default:\n                        value = $field.val();\n                }\n\n                if (value) {\n                    if (typeof data.params[param] !== 'undefined') {\n                        data.params[param] += ',' + value;\n                    } else {\n                        data.params[param] = value;\n                    }\n                }\n            });\n\n            this.insertShortcode(data);\n        }\n\n        insertShortcode(data) {\n            var enclosingText = null;\n\n            if ( this.editor ) {\n                enclosingText = this.editor.selection.getContent();\n            }\n\n            var text = '[' + data.command;\n\n            if (data.params) {\n                for (var key in data.params) {\n                    text += ' ' + key + '=\"' + data.params[key] + '\"';\n                }\n            }\n\n            text += ']';\n\n            if ( enclosingText ) {\n                text += enclosingText;\n            }\n            if ( data.allowsContent ) {\n                text += '[/' + data.command + ']';\n            }\n\n            send_to_editor( text );\n        }\n\n        onSubmitBtnClick(e) {\n            e.preventDefault();\n\n            if ( this.validateForm() ) {\n                this.getFormValues();\n            }\n        }\n\n        onSelectChanged(e) {\n            this.selectedShortcode = this.$select.val();\n\n            if (this.$activeShortcodeEditor) {\n                this.$activeShortcodeEditor.removeClass('active');\n            }\n            if (this.$activeShortcodeDescription) {\n                this.$activeShortcodeDescription.removeClass('active');\n            }\n\n            // $activeShortcodeElems references both the shortcode editor and\n            // the shortcode description\n            var $activeShortcodeElems = this.$interface.find('.shortcode-' + this.selectedShortcode).addClass('active');\n            this.$activeShortcodeEditor = $activeShortcodeElems.filter('.shortcode-editor');\n            this.$activeShortcodeDescription = $activeShortcodeElems.filter('.shortcode-desc');\n\n            this.$activeFields = this.$activeShortcodeEditor.find('.wp-scif-field');\n        }\n    }\n}\n\nif ( typeof jQuery !== 'undefined' ) {\n    jQuery(document).ready( function() {\n        new WPSCIF.ShortcodeInterface();\n    });\n}\n"]}