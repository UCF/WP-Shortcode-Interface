{"version":3,"sources":["field.ts","checkbox.ts","color.ts","date.ts","email.ts","number.ts","select.ts","text.ts","preview.ts","fieldset.ts","wp-scif.ts"],"names":["WPSCIF","Fields","Field","$field","this","fieldID","attr","fieldName","jQuery","text","required","data","param","$errorContainer","$errorMessage","find","mask","inputMask","validationMessage","prototype","isValid","value","getValue","addClass","RegExp","test","removeClass","setDefaultValue","val","hasValue","getOutput","CheckboxField","_super","_this","call","on","trigger","__extends","is","prop","ColorField","palettes","replace","split","wpColorPicker","hide","color","DateField","datepicker","dateFormat","EmailField","timer","clearTimeout","setTimeout","NumberField","SelectField","options","Array","each","idx","obj","push","inArray","TextField","PreviewWindow","iframe","get","document","contentWindow","contentDocument","$container","$loadIcon","load","onunload","show","write","content","parser","createElement","href","src","params","parseSearch","search","buildUrl","retval","paramString","substring","splitAnd","i","p","buildSearch","paramsJoined","encodeURIComponent","join","protocol","hostname","pathname","FieldSet","command","$description","allowContent","supportsPreview","fields","field","createField","e","init","forEach","destroy","unbind","tagName","hasClass","errorCount","getValues","buildShortcode","outputArr","length","ShortcodeInterface","$toggle","$interface","$submitBtn","$select","activeFieldSet","editor","tinyMCE","activeEditor","preview","click","onSubmitBtnClick","change","onSelectChanged","enclosingText","selection","getContent","insertShortcode","send_to_editor","preventDefault","sc","updatePreview","shortcode","ready","shortcodeInterface","tinymce"],"mappings":"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","file":"wp-scif.min.js","sourcesContent":["/**\n * Fields namespace\n * @namespace\n */\nnamespace WPSCIF.Fields {\n    /**\n     * Abstrat representing a field\n     * @class\n     */\n    export abstract class Field {\n        /** \n         * input field\n         */\n        protected $field: any;\n\n        /**\n         * The field name\n         */\n        protected fieldName: string;\n\n        /**\n         * Indicates the field is required\n         */\n        public required: boolean;\n\n        /**\n         * Indicates the shortcode param this field maps to\n         */\n        public param: string;\n\n        /**\n         * The default value of the field\n         */\n        public default: string;\n\n        /**\n         * The id of the field\n         */\n        protected fieldID: string;\n\n        /**\n         * The container of the error message.\n         */\n        protected $errorContainer: any;\n\n        /**\n         * The span containing the error message\n         */\n        protected $errorMessage: any;\n\n        /**\n         * Input mask for validation\n         */\n        protected inputMask: string;\n\n        /**\n         * Message to display when regex validation fails.\n         */\n        protected validationMessage: string;\n\n        /**\n         * Timer for debouncing\n         */\n        protected timer: any;\n\n        /**\n         * Returns a new Field object.\n         * @param field {jQuery} \n         */\n        constructor($field: any) {\n            this.$field = $field;\n            this.fieldID = this.$field.attr('id');\n            this.fieldName = jQuery('label[for=' + this.fieldID + ']').text();\n            this.required = <boolean>this.$field.data('scif-required');\n            if (typeof this.required === \"undefined\") {\n                this.required = false;\n            }\n            this.param = this.$field.data('scif-param');\n            this.default = this.$field.data('scif-default');\n            this.$errorContainer = jQuery('#' + this.fieldID + '-error');\n    \n            this.$errorMessage = this.$errorContainer.find('.error-message');\n\n            // Assign input mask if it exists as a data attr\n            var mask = this.$field.data('scif-validation-mask');\n            if ( mask ) {\n                this.inputMask = mask;\n            }\n\n            // Be sure to override this message on specific field types.\n            this.validationMessage = 'Please enter a valid value.';\n        }\n\n        /**\n         * Returns true if the field value is valid\n         * @return {boolean}\n         */\n        public isValid(): boolean {\n            var value = this.getValue();\n\n            // If required, it must have value\n            if (this.required && ! value) {\n                this.$errorContainer.addClass('active');\n                this.$errorMessage.text(this.fieldName + ' is required.');\n                return false;\n            }\n\n            if (value && this.inputMask) {\n                var re = new RegExp(this.inputMask);\n\n                if (!re.test(value)) {\n                    this.$errorContainer.addClass('active');\n                    this.$errorMessage.text(this.validationMessage);\n                    return false;\n                }\n            }\n\n            this.$errorContainer.removeClass('active');\n            this.$errorMessage = '';\n            return true;\n        }\n\n        /**\n         * Sets the default value of the field\n         */\n        public setDefaultValue() {\n            if (this.default) {\n                this.$field.val(this.default);\n            } else {\n                this.$field.val('');\n            }\n        }\n\n        /**\n         * Returns true of the field has value.\n         * @return {boolean}\n         */\n        public hasValue(): boolean {\n            if (this.getValue()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns the value of the field\n         * @return {string}\n         */\n        public getValue() {\n            return this.$field.val();\n        }\n\n        /**\n         * Returns the output for the shortcode\n         * @return {string}\n         */\n        public getOutput() {\n            return this.param + '=\"' + this.getValue() + '\"';\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class CheckboxField extends Field {\n        /**\n         * Constructors a new CheckboxField\n         * @param $field \n         */\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n\n        /**\n         * Returns the value of the field\n         * @return {boolean}\n         */\n        public getValue(): boolean {\n            return this.$field.is(':checked');\n        }\n\n        /**\n         * Sets the default value of the field\n         */\n        public setDefaultValue() {\n            if (this.default !== null ) {\n                this.$field.prop('checked', true);\n            } else {\n                this.$field.prop('checked', false);\n            }\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class ColorField extends Field {\n        /**\n         * Constructors a new ColorField\n         * @param $field\n         */\n        constructor($field: any) {\n            super($field);\n\n            var palettes = false;\n\n            if (this.$field.data('scif-palette')) {\n                palettes = this.$field.data('scif-palette').replace(' ', '').split(',');\n            }\n\n            this.$field.wpColorPicker({\n                hide: false,\n                palettes: palettes,\n                color: this.default\n            });\n\n            this.inputMask = this.inputMask || '\\#([0-9a-fA-F]{3}|\\#([0-9a-fA-F]{6}|rgb\\(\\d{1,3},\\ ?\\d{1,3},\\ ?\\d{1,3}\\)|rgba\\(\\d{1,3},\\ ?\\d{1,3},\\ ?\\d{1,3},\\ ?\\d{1,3}\\.?\\d?\\))';\n            this.validationMessage = 'Please, enter a valid hex color value, rgb or rgba.';\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class DateField extends Field {\n        constructor($field: any) {\n            super($field);\n\n            this.$field.datepicker({\n                dateFormat: 'yy-mm-dd'\n            });\n\n            this.inputMask = this.inputMask || '\\\\d{4}\\-\\\\d{2}\\-\\\\d{2}';\n            this.validationMessage = 'Please, enter a date in the format of YYYY-MM-DD';\n            this.$field.attr('type', 'text');\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class EmailField extends Field {\n        constructor($field: any) {\n            super($field);\n            this.inputMask = this.inputMask || '.*(\\.+)?.*\\@.*\\..*';\n            this.validationMessage = 'Please, enter a valid email address.';\n\n            this.$field.on('input', () => {\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n\n                this.timer = setTimeout( () => {\n                    this.$field.trigger('wpscif:field:update');\n                }, 500);\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class NumberField extends Field {\n        constructor($field: any) {\n            super($field);\n            this.inputMask = this.inputMask || '\\\\d+\\.?\\\\d+';\n\n            this.$field.on('input', () => {\n                if (this.timer) {\n                    clearTimeout(this.timer);\n                }\n\n                this.timer = setTimeout( () => {\n                    this.$field.trigger('wpscif:field:update');\n                }, 500);\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class SelectField extends Field {\n        /**\n         * An array of option strings\n         */\n        private options: Array<string>;\n\n        /**\n         * Generates a new SelectField\n         * @param $field \n         */\n        constructor($field: any) {\n            super($field)\n            this.options = new Array<string>();\n            this.$field.find('option').each( (idx, obj) => {\n                this.options.push(jQuery(obj).val());\n            });\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n\n        /**\n         * Sets the default value of the select field\n         */\n        public setDefaultValue() {\n            if (this.default) {\n                this.$field.val(this.default);\n            } else if (jQuery.inArray('', this.options) > -1) {\n                this.$field.val('');\n            } else {\n                this.$field.find('option:selected').prop('selected', false);\n                this.$field.find('option:first').prop('selected', 'selected');\n            }\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class TextField extends Field {\n        /**\n         * Generates a new TextField\n         * @param $field \n         */\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('input', () => {\n                if (this.timer) {\n                    clearTimeout(this.timer)\n                }\n\n                this.timer = setTimeout( () => {\n                    this.$field.trigger('wpscif:field:update');\n                }, 500);\n            });\n        }\n    }\n}\n","namespace WPSCIF {\n    export class PreviewWindow {\n        /**\n         * The Iframe Element\n         */\n        iframe: any;\n\n        /**\n         * The contentWindow||contentDocument of the iFrame\n         */\n        document: any;\n\n        /**\n         * The container div of the iframe\n         */\n        $container: any;\n\n        /**\n         * The loading gif for iframe transitions\n         */\n        $loadIcon: any;\n\n        /**\n         * Generators a new PreviewWindow\n         */\n        constructor() {\n            this.iframe = <HTMLIFrameElement>jQuery('#scif-preview-iframe').get(0);\n            \n            this.document = this.iframe.contentWindow || this.iframe.contentDocument;\n            this.$container = jQuery('#scif-preview-window');\n            this.$loadIcon = jQuery('#scif-loading');\n\n            jQuery(this.iframe).load( () => {\n                this.document = this.iframe.contentWindow || this.iframe.contentDocument;\n\n                this.document.onunload = () => {\n                    this.$loadIcon.show();\n                };\n                this.$loadIcon.hide();\n            });\n        }\n\n        /**\n         * Updates the iframe with the updated shortcode string\n         * @param content {string} The shortcode output\n         */\n        write(content: string) {\n            var parser = document.createElement('a');\n            parser.href = this.iframe.src;\n            \n            var params = this.parseSearch(parser.search);\n            params['shortcode'] = content;\n\n            this.iframe.src = this.buildUrl(parser, params);\n        }\n\n        /**\n         * Shows the preview window\n         */\n        show() {\n            this.$container.show();\n        }\n\n        /**\n         * Hides the preview window\n         */\n        hide() {\n            this.$container.hide();\n        }\n\n        /**\n         * Parses a search string into an array\n         * @param search A url search string\n         * @return {Array<string>}\n         */\n        parseSearch(search: string): Array<string> {\n            var retval = Array<string>();\n            var paramString = search.substring(1);\n            var splitAnd = paramString.split('&');\n            \n            for(var i in splitAnd) {\n                var p = splitAnd[i].split('=');\n                retval[p[0]] = p[1];\n            }\n\n            return retval;\n        }\n\n        /**\n         * Parses a search array into a string\n         * @param params {Array<string>}\n         * @return {string}\n         */\n        buildSearch(params: Array<string>): string {\n            var retval = '?';\n            var paramsJoined = new Array<string>();\n\n            for(var i in params) {\n                paramsJoined.push(i + '=' + encodeURIComponent(params[i]));\n            }\n\n            return retval + paramsJoined.join('&');\n        }\n\n        /**\n         * \n         * @param parser {HTMLAnchorElement} An anchor element\n         * @param params {Array<string>} The search params\n         */\n        buildUrl(parser, params) {\n            var retval = parser.protocol + '//';\n            retval += parser.hostname;\n            retval += parser.pathname;\n            retval += this.buildSearch(params);\n\n            return retval;\n        }\n    }\n}\n","/// <reference path=\"./fields/fields.d.ts\" />\n\nnamespace WPSCIF {\n    export class FieldSet {\n        /**\n         * The shortcode command\n         */\n        private command: string;\n\n        /**\n         * The array of fields\n         */\n        private fields: Array<Fields.Field>;\n\n        /**\n         * The container div of the fieldset\n         */\n        public $container: any;\n\n        /**\n         * The description div of the fieldset\n         */\n        private $description: any;\n\n        /**\n         * Whether this shortcode can wrap around existing content\n         */\n        public allowContent: boolean;\n\n        /**\n         * Whether this shortcode supports automatic preview\n         */\n        public supportsPreview: boolean;\n        \n        /**\n         * Generates a new fieldset\n         * @param command {string}\n         */\n        constructor(command: string) {\n            this.command = command;\n            this.$container = jQuery('.shortcode-editor.shortcode-' + command);\n            this.$description = jQuery('.shortcode-desc.shortcode-' + this.command);\n            this.allowContent = this.$container.is('[data-scif-allows-content]');\n            this.supportsPreview = this.$container.is('[data-scif-preview]');\n            this.fields = new Array<Fields.Field>();\n            var $fields = this.$container.find('.wp-scif-field');\n\n            // Create the fields\n            $fields.each( (idx, obj) => {\n                var field = this.createField(obj);\n                this.fields.push(field);\n            });\n\n            // Setup update event on each field\n            jQuery('.wp-scif-field').on('wpscif:field:update', (e) => {\n                this.$container.trigger('wpscif:fieldset:update');\n            });\n\n            this.init();\n        }\n\n        /**\n         * Sets the default state of the fieldset\n         */\n        private init() {\n            this.fields.forEach( (field) => {\n                field.setDefaultValue();\n            });\n\n            this.$container.addClass('active');\n            this.$description.addClass('active');\n        }\n\n        /**\n         * Removes active states and unbinds events\n         */\n        public destroy() {\n            this.$container.removeClass('active');\n            this.$description.removeClass('active');\n            jQuery('.wp-scif-field').unbind('wpscif:field:update');\n        }\n\n        /**\n         * Creates a Field object based on the provided form element\n         * @param obj \n         */\n        private createField(obj) {\n            var $field = jQuery(obj),\n                tagName = $field.prop('tagName');\n\n            if (tagName === 'SELECT') {\n                return new Fields.SelectField($field);\n            } else if (tagName === 'INPUT') {\n                var type = $field.attr('type');\n                switch(type) {\n                    case 'checkbox':\n                        return new Fields.CheckboxField($field);\n                    case 'email':\n                        return new Fields.EmailField($field);\n                    case 'text':\n                        if ($field.hasClass('wp-scif-date')) {\n                            return new Fields.DateField($field);\n                        }\n\n                        if ($field.hasClass('wp-scif-color')) {\n                            return new Fields.ColorField($field);\n                        }\n\n                        return new Fields.TextField($field);\n                    default:\n                        return new Fields.TextField($field);\n                }\n            }\n        }\n\n        /**\n         * Determines if the fieldset if valid\n         * Also displays errors if any are found\n         * @return {boolean}\n         */\n        public isValid(): boolean {\n            var errorCount: number = 0;\n\n            this.fields.forEach( (field) => {\n                if (!field.isValid()) {\n                    errorCount++;\n                }\n            });\n\n            if (errorCount > 0) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Gets the ourput from each field\n         * @return {Array<string>}\n         */\n        public getValues() {\n            var retval = Array<string>();\n\n            this.fields.forEach( (field) => {\n                if (field.hasValue()) {\n                    retval.push(field.getOutput());\n                }\n            });\n\n            return retval;\n        }\n\n        /**\n         * Builds the shortcode string\n         * @param text The text to wrap around the shortcode.\n         * @return {string}\n         */\n        public buildShortcode(text='') {\n            var retval = '[' + this.command;\n            var outputArr = this.getValues();\n            \n            if (outputArr.length > 0) {\n                retval += ' ' + outputArr.join(' ');\n            }\n\n            retval += ']';\n\n            if (text) {\n                retval += text;\n            }\n\n            if (this.allowContent) {\n                retval += '[/' + this.command + ']';\n            }\n\n            return retval;\n        }\n    }\n}\n","/// <reference path=\"./wp-scif.d.ts\" />\n\ndeclare var tinyMCE: any; // The WP tinymce editor\ndeclare var tinymce: any; // The tinymce object\ndeclare var send_to_editor: Function; // wp function for sending to primary tinymce editor\n\nnamespace WPSCIF {\n    /**\n     * Generates a new ShortcodeInterface\n     */\n    export class ShortcodeInterface {\n        /**\n         * The anchor button used to open the interface\n         */\n        public $toggle: any;\n        \n        /**\n         * The interface container div\n         */\n        public $interface: any;\n\n        /**\n         * The button that writes the shortcode to the editor\n         */\n        public $submitBtn: any;\n\n        /**\n         * The select element with the list of shortcodes.\n         */\n        public $select: any;\n\n        /**\n         * The Fieldset of the active shortcode\n         */\n        public activeFieldSet: FieldSet;\n\n        /**\n         * The preview window\n         */\n        public preview: PreviewWindow;\n\n        /**\n         * The active tinymce editor\n         */\n        public editor: any;\n\n        constructor() {\n            this.$toggle = jQuery('#add-shortcode');\n            this.$interface = jQuery('#wp-scif-form-inner');\n            this.$submitBtn = this.$interface.find('#wp-scif-submit');\n            this.$select = this.$interface.find('#wp-scif-select');\n            this.activeFieldSet = null;\n            this.editor = tinyMCE.activeEditor;\n            this.preview = new PreviewWindow();\n            this.preview.hide();\n\n            this.$submitBtn.click( (e) => { this.onSubmitBtnClick(e) });\n            this.$select.change( (e) => { this.onSelectChanged(e) });\n        }\n\n        /**\n         * Gets selected content (if any) and generates the shortcode\n         * @return {string} The shortcode string\n         */\n        buildShortcode() {\n            var enclosingText = null;\n\n            if (this.editor) {\n                enclosingText = this.editor.selection.getContent();\n            }\n\n            return this.activeFieldSet.buildShortcode(enclosingText);\n        }\n\n        /**\n         * Inserts the generated shortcode into the tinymce editor\n         */\n        insertShortcode() {\n            var text = this.buildShortcode();\n            send_to_editor( text );\n        }\n\n        /**\n         * Event handler for when then $submitBtn is clicked\n         * @param e {EventArgs}\n         */\n        onSubmitBtnClick(e) {\n            e.preventDefault();\n\n            if ( this.activeFieldSet.isValid() ) {\n                this.insertShortcode();\n            }\n        }\n\n        /**\n         * Event hanlder for when the shortcode select changes value.\n         * @param e {EventArgs}\n         */\n        onSelectChanged(e) {\n            if (this.activeFieldSet) {\n                this.activeFieldSet.destroy();\n                this.activeFieldSet.$container.unbind('wpscif:fieldset:update');\n            }\n\n            var sc = this.$select.val();\n\n            this.activeFieldSet = new FieldSet(sc);\n\n            if (this.activeFieldSet.supportsPreview) {\n                this.activeFieldSet.$container.on('wpscif:fieldset:update', () => {\n                    this.updatePreview();\n                });\n\n                this.updatePreview();\n\n                this.preview.show();\n            } else {\n                this.preview.hide();\n            }\n        }\n\n        /**\n         * Updates the preview window\n         */\n        updatePreview() {\n            var shortcode = this.buildShortcode();\n            this.preview.write(shortcode);\n        }\n    }\n}\n\nif ( typeof jQuery !== 'undefined' ) {\n    jQuery(document).ready( () => {\n        var shortcodeInterface: WPSCIF.ShortcodeInterface;\n\n        tinymce.on('addeditor', (e) => {\n            if ( ! shortcodeInterface) {\n                shortcodeInterface = new WPSCIF.ShortcodeInterface();   \n            }\n        });\n    });\n}\n"]}