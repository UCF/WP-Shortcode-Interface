{"version":3,"sources":["field.ts","text.ts","select.ts","date.ts","color.ts","checkbox.ts","preview.ts","fieldset.ts","wp-scif.ts"],"names":["WPSCIF","Fields","Field","$field","this","fieldID","attr","required","data","param","prototype","isValid","id","getValue","jQuery","addClass","removeClass","setDefaultValue","val","hasValue","getOutput","TextField","_super","_this","call","on","timer","clearTimeout","setTimeout","trigger","__extends","SelectField","options","Array","find","each","idx","obj","push","inArray","prop","DateField","ColorField","CheckboxField","is","PreviewWindow","iframe","get","document","contentWindow","contentDocument","$container","$loadIcon","load","onunload","show","hide","write","content","parser","createElement","href","src","params","parseSearch","search","buildUrl","retval","paramString","substring","splitAnd","split","i","p","buildSearch","paramsJoined","encodeURIComponent","join","protocol","hostname","pathname","FieldSet","command","$description","allowContent","supportsPreview","fields","field","createField","e","init","forEach","destroy","unbind","tagName","errorCount","getValues","buildShortcode","text","outputArr","length","ShortcodeInterface","$toggle","$interface","$submitBtn","$select","activeFieldSet","editor","tinyMCE","activeEditor","preview","click","onSubmitBtnClick","change","onSelectChanged","enclosingText","selection","getContent","insertShortcode","send_to_editor","preventDefault","sc","updatePreview","shortcode","ready","shortcodeInterface","tinymce"],"mappings":"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","file":"wp-scif.min.js","sourcesContent":["/**\n * Fields namespace\n * @namespace\n */\nnamespace WPSCIF.Fields {\n    /**\n     * Abstrat representing a field\n     * @class\n     */\n    export abstract class Field {\n        /** \n         * input field\n         */\n        protected $field: any;\n\n        /**\n         * Indicates the field is required\n         */\n        public required: boolean;\n\n        /**\n         * Indicates the shortcode param this field maps to\n         */\n        public param: string;\n\n        /**\n         * The default value of the field\n         */\n        public default: string;\n\n        /**\n         * The id of the field\n         */\n        private fieldID: string;\n\n        /**\n         * Returns a new Field object.\n         * @param field {jQuery} \n         */\n        constructor($field: any) {\n            this.$field = $field;\n            this.fieldID = this.$field.attr('id');\n            this.required = <boolean>this.$field.data('scif-required');\n            if (typeof this.required === \"undefined\") {\n                this.required = false;\n            }\n            this.param = this.$field.data('scif-param');\n            this.default = this.$field.data('scif-default');\n        }\n\n        /**\n         * Returns true if the field value is valid\n         * @return {boolean}\n         */\n        public isValid(): boolean {\n            var id = '#' + this.fieldID + '-' + this.param + '-error';\n            // If required, it must have value\n            if (this.required && ! this.getValue()) {\n                jQuery(id).addClass('active');\n                return false;\n            }\n            jQuery(id).removeClass('active');\n            return true;\n        }\n\n        /**\n         * Sets the default value of the field\n         */\n        public setDefaultValue() {\n            if (this.default) {\n                this.$field.val(this.default);\n            } else {\n                this.$field.val('');\n            }\n        }\n\n        /**\n         * Returns true of the field has value.\n         * @return {boolean}\n         */\n        public hasValue(): boolean {\n            if (this.getValue()) {\n                return true;\n            }\n\n            return false;\n        }\n\n        /**\n         * Returns the value of the field\n         * @return {string}\n         */\n        public getValue() {\n            return this.$field.val();\n        }\n\n        /**\n         * Returns the output for the shortcode\n         * @return {string}\n         */\n        public getOutput() {\n            return this.param + '=\"' + this.getValue() + '\"';\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class TextField extends Field {\n        /**\n         * Timer for debouncing.\n         */\n        private timer: any;\n\n        /**\n         * Generates a new TextField\n         * @param $field \n         */\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('input', () => {\n                if (this.timer) {\n                    clearTimeout(this.timer)\n                }\n\n                this.timer = setTimeout( () => {\n                    this.$field.trigger('wpscif:field:update');\n                }, 500);\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class SelectField extends Field {\n        /**\n         * An array of option strings\n         */\n        private options: Array<string>;\n\n        /**\n         * Generates a new SelectField\n         * @param $field \n         */\n        constructor($field: any) {\n            super($field)\n            this.options = new Array<string>();\n            this.$field.find('option').each( (idx, obj) => {\n                this.options.push(jQuery(obj).val());\n            });\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n\n        /**\n         * Sets the default value of the select field\n         */\n        public setDefaultValue() {\n            if (this.default) {\n                this.$field.val(this.default);\n            } else if (jQuery.inArray('', this.options) > -1) {\n                this.$field.val('');\n            } else {\n                this.$field.find('option:selected').prop('selected', false);\n                this.$field.find('option:first').prop('selected', 'selected');\n            }\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class DateField extends Field {\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class ColorField extends Field {\n        /**\n         * Constructors a new ColorField\n         * @param $field\n         */\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n    }\n}\n","namespace WPSCIF.Fields {\n    export class CheckboxField extends Field {\n        /**\n         * Constructors a new CheckboxField\n         * @param $field\n         */\n        constructor($field: any) {\n            super($field);\n\n            this.$field.on('change', () => {\n                this.$field.trigger('wpscif:update');\n            });\n        }\n\n        /**\n         * Returns the value of the field\n         * @return {boolean}\n         */\n        public getValue(): boolean {\n            return this.$field.is(':checked');\n        }\n\n        /**\n         * Sets the default value of the field\n         */\n        public setDefaultValue() {\n            if (this.default) {\n                this.$field.prop('checked', true);\n            } else {\n                this.$field.prop('checked', false);\n            }\n        }\n    }\n}\n","namespace WPSCIF {\n    export class PreviewWindow {\n        /**\n         * The Iframe Element\n         */\n        iframe: any;\n\n        /**\n         * The contentWindow||contentDocument of the iFrame\n         */\n        document: any;\n\n        /**\n         * The container div of the iframe\n         */\n        $container: any;\n\n        /**\n         * The loading gif for iframe transitions\n         */\n        $loadIcon: any;\n\n        /**\n         * Generators a new PreviewWindow\n         */\n        constructor() {\n            this.iframe = <HTMLIFrameElement>jQuery('#scif-preview-iframe').get(0);\n            \n            this.document = this.iframe.contentWindow || this.iframe.contentDocument;\n            this.$container = jQuery('#scif-preview-window');\n            this.$loadIcon = jQuery('#scif-loading');\n\n            jQuery(this.iframe).load( () => {\n                this.document = this.iframe.contentWindow || this.iframe.contentDocument;\n\n                this.document.onunload = () => {\n                    this.$loadIcon.show();\n                };\n                this.$loadIcon.hide();\n            });\n        }\n\n        /**\n         * Updates the iframe with the updated shortcode string\n         * @param content {string} The shortcode output\n         */\n        write(content: string) {\n            var parser = document.createElement('a');\n            parser.href = this.iframe.src;\n            \n            var params = this.parseSearch(parser.search);\n            params['shortcode'] = content;\n\n            this.iframe.src = this.buildUrl(parser, params);\n        }\n\n        /**\n         * Shows the preview window\n         */\n        show() {\n            this.$container.show();\n        }\n\n        /**\n         * Hides the preview window\n         */\n        hide() {\n            this.$container.hide();\n        }\n\n        /**\n         * Parses a search string into an array\n         * @param search A url search string\n         * @return {Array<string>}\n         */\n        parseSearch(search: string): Array<string> {\n            var retval = Array<string>();\n            var paramString = search.substring(1);\n            var splitAnd = paramString.split('&');\n            \n            for(var i in splitAnd) {\n                var p = splitAnd[i].split('=');\n                retval[p[0]] = p[1];\n            }\n\n            return retval;\n        }\n\n        /**\n         * Parses a search array into a string\n         * @param params {Array<string>}\n         * @return {string}\n         */\n        buildSearch(params: Array<string>): string {\n            var retval = '?';\n            var paramsJoined = new Array<string>();\n\n            for(var i in params) {\n                paramsJoined.push(i + '=' + encodeURIComponent(params[i]));\n            }\n\n            return retval + paramsJoined.join('&');\n        }\n\n        /**\n         * \n         * @param parser {HTMLAnchorElement} An anchor element\n         * @param params {Array<string>} The search params\n         */\n        buildUrl(parser, params) {\n            var retval = parser.protocol + '//';\n            retval += parser.hostname;\n            retval += parser.pathname;\n            retval += this.buildSearch(params);\n\n            return retval;\n        }\n    }\n}\n","/// <reference path=\"./fields/fields.d.ts\" />\n\nnamespace WPSCIF {\n    export class FieldSet {\n        /**\n         * The shortcode command\n         */\n        private command: string;\n\n        /**\n         * The array of fields\n         */\n        private fields: Array<Fields.Field>;\n\n        /**\n         * The container div of the fieldset\n         */\n        public $container: any;\n\n        /**\n         * The description div of the fieldset\n         */\n        private $description: any;\n\n        /**\n         * Whether this shortcode can wrap around existing content\n         */\n        public allowContent: boolean;\n\n        /**\n         * Whether this shortcode supports automatic preview\n         */\n        public supportsPreview: boolean;\n        \n        /**\n         * Generates a new fieldset\n         * @param command {string}\n         */\n        constructor(command: string) {\n            this.command = command;\n            this.$container = jQuery('.shortcode-editor.shortcode-' + command);\n            this.$description = jQuery('.shortcode-desc.shortcode-' + this.command);\n            this.allowContent = this.$container.is('[data-scif-allows-content]');\n            this.supportsPreview = this.$container.is('[data-scif-preview]');\n            this.fields = new Array<Fields.Field>();\n            var $fields = this.$container.find('.wp-scif-field');\n\n            // Create the fields\n            $fields.each( (idx, obj) => {\n                var field = this.createField(obj);\n                this.fields.push(field);\n            });\n\n            // Setup update event on each field\n            jQuery('.wp-scif-field').on('wpscif:field:update', (e) => {\n                this.$container.trigger('wpscif:fieldset:update');\n            });\n\n            this.init();\n        }\n\n        /**\n         * Sets the default state of the fieldset\n         */\n        private init() {\n            this.fields.forEach( (field) => {\n                field.setDefaultValue();\n            });\n\n            this.$container.addClass('active');\n            this.$description.addClass('active');\n        }\n\n        /**\n         * Removes active states and unbinds events\n         */\n        public destroy() {\n            this.$container.removeClass('active');\n            this.$description.removeClass('active');\n            jQuery('.wp-scif-field').unbind('wpscif:field:update');\n        }\n\n        /**\n         * Creates a Field object based on the provided form element\n         * @param obj \n         */\n        private createField(obj) {\n            var $field = jQuery(obj),\n                tagName = $field.prop('tagName');\n\n            if (tagName === 'SELECT') {\n                return new Fields.SelectField($field);\n            } else if (tagName === 'INPUT') {\n                var type = $field.attr('type');\n                switch(type) {\n                    case 'text':\n                        return new Fields.TextField($field);\n                    case 'date':\n                        return new Fields.DateField($field);\n                    case 'checkbox':\n                        return new Fields.CheckboxField($field);\n                    default:\n                        return new Fields.TextField($field);\n                }\n            }\n        }\n\n        /**\n         * Determines if the fieldset if valid\n         * Also displays errors if any are found\n         * @return {boolean}\n         */\n        public isValid(): boolean {\n            var errorCount: number = 0;\n\n            this.fields.forEach( (field) => {\n                if (!field.isValid) {\n                    errorCount++;\n                }\n            });\n\n            if (errorCount > 0) {\n                return false;\n            }\n\n            return true;\n        }\n\n        /**\n         * Gets the ourput from each field\n         * @return {Array<string>}\n         */\n        public getValues() {\n            var retval = Array<string>();\n\n            this.fields.forEach( (field) => {\n                if (field.hasValue()) {\n                    retval.push(field.getOutput());\n                }\n            });\n\n            return retval;\n        }\n\n        /**\n         * Builds the shortcode string\n         * @param text The text to wrap around the shortcode.\n         * @return {string}\n         */\n        public buildShortcode(text='') {\n            var retval = '[' + this.command;\n            var outputArr = this.getValues();\n            \n            if (outputArr.length > 0) {\n                retval += ' ' + outputArr.join(' ');\n            }\n\n            retval += ']';\n\n            if (text) {\n                retval += text;\n            }\n\n            if (this.allowContent) {\n                retval += '[/' + this.command + ']';\n            }\n\n            return retval;\n        }\n    }\n}\n","/// <reference path=\"./wp-scif.d.ts\" />\n\ndeclare var tinyMCE: any; // The WP tinymce editor\ndeclare var tinymce: any; // The tinymce object\ndeclare var send_to_editor: Function; // wp function for sending to primary tinymce editor\n\nnamespace WPSCIF {\n    /**\n     * Generates a new ShortcodeInterface\n     */\n    export class ShortcodeInterface {\n        /**\n         * The anchor button used to open the interface\n         */\n        public $toggle: any;\n        \n        /**\n         * The interface container div\n         */\n        public $interface: any;\n\n        /**\n         * The button that writes the shortcode to the editor\n         */\n        public $submitBtn: any;\n\n        /**\n         * The select element with the list of shortcodes.\n         */\n        public $select: any;\n\n        /**\n         * The Fieldset of the active shortcode\n         */\n        public activeFieldSet: FieldSet;\n\n        /**\n         * The preview window\n         */\n        public preview: PreviewWindow;\n\n        /**\n         * The active tinymce editor\n         */\n        public editor: any;\n\n        constructor() {\n            this.$toggle = jQuery('#add-shortcode');\n            this.$interface = jQuery('#wp-scif-form-inner');\n            this.$submitBtn = this.$interface.find('#wp-scif-submit');\n            this.$select = this.$interface.find('#wp-scif-select');\n            this.activeFieldSet = null;\n            this.editor = tinyMCE.activeEditor;\n            this.preview = new PreviewWindow();\n            this.preview.hide();\n\n            this.$submitBtn.click( (e) => { this.onSubmitBtnClick(e) });\n            this.$select.change( (e) => { this.onSelectChanged(e) });\n        }\n\n        /**\n         * Gets selected content (if any) and generates the shortcode\n         * @return {string} The shortcode string\n         */\n        buildShortcode() {\n            var enclosingText = null;\n\n            if (this.editor) {\n                enclosingText = this.editor.selection.getContent();\n            }\n\n            return this.activeFieldSet.buildShortcode(enclosingText);\n        }\n\n        /**\n         * Inserts the generated shortcode into the tinymce editor\n         */\n        insertShortcode() {\n            var text = this.buildShortcode();\n            send_to_editor( text );\n        }\n\n        /**\n         * Event handler for when then $submitBtn is clicked\n         * @param e {EventArgs}\n         */\n        onSubmitBtnClick(e) {\n            e.preventDefault();\n\n            if ( this.activeFieldSet.isValid() ) {\n                this.insertShortcode();\n            }\n        }\n\n        /**\n         * Event hanlder for when the shortcode select changes value.\n         * @param e {EventArgs}\n         */\n        onSelectChanged(e) {\n            if (this.activeFieldSet) {\n                this.activeFieldSet.destroy();\n                this.activeFieldSet.$container.unbind('wpscif:fieldset:update');\n            }\n\n            var sc = this.$select.val();\n\n            this.activeFieldSet = new FieldSet(sc);\n\n            if (this.activeFieldSet.supportsPreview) {\n                this.activeFieldSet.$container.on('wpscif:fieldset:update', () => {\n                    this.updatePreview();\n                });\n\n                this.updatePreview();\n\n                this.preview.show();\n            } else {\n                this.preview.hide();\n            }\n        }\n\n        /**\n         * Updates the preview window\n         */\n        updatePreview() {\n            var shortcode = this.buildShortcode();\n            this.preview.write(shortcode);\n        }\n    }\n}\n\nif ( typeof jQuery !== 'undefined' ) {\n    jQuery(document).ready( () => {\n        var shortcodeInterface: WPSCIF.ShortcodeInterface;\n\n        tinymce.on('addeditor', (e) => {\n            if ( ! shortcodeInterface) {\n                shortcodeInterface = new WPSCIF.ShortcodeInterface();   \n            }\n        });\n    });\n}\n"]}